// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VirtualLibraryAPI.Domain;

#nullable disable

namespace VirtualLibraryAPI.Library.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230411094725_AddLibraryMigration")]
    partial class AddLibraryMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VirtualLibraryAPI.Domain.Models.Items", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ItemID");

                    b.ToTable("Items", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("VirtualLibraryAPI.Domain.Models.Articles", b =>
                {
                    b.HasBaseType("VirtualLibraryAPI.Domain.Models.Items");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MagazineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MagazinesIssueNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Version")
                        .HasColumnType("real");

                    b.ToTable("Articles", (string)null);
                });

            modelBuilder.Entity("VirtualLibraryAPI.Domain.Models.Books", b =>
                {
                    b.HasBaseType("VirtualLibraryAPI.Domain.Models.Items");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("VirtualLibraryAPI.Domain.Models.Copies", b =>
                {
                    b.HasBaseType("VirtualLibraryAPI.Domain.Models.Items");

                    b.Property<int>("CopyID")
                        .HasColumnType("int");

                    b.ToTable("Copies", (string)null);
                });

            modelBuilder.Entity("VirtualLibraryAPI.Domain.Models.Magazines", b =>
                {
                    b.HasBaseType("VirtualLibraryAPI.Domain.Models.Items");

                    b.Property<int>("IssueNumber")
                        .HasColumnType("int");

                    b.ToTable("Magazines", (string)null);
                });

            modelBuilder.Entity("VirtualLibraryAPI.Domain.Models.Articles", b =>
                {
                    b.HasOne("VirtualLibraryAPI.Domain.Models.Items", "Item")
                        .WithMany("Articles")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("VirtualLibraryAPI.Domain.Models.Books", b =>
                {
                    b.HasOne("VirtualLibraryAPI.Domain.Models.Items", "Item")
                        .WithMany("Books")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("VirtualLibraryAPI.Domain.Models.Copies", b =>
                {
                    b.HasOne("VirtualLibraryAPI.Domain.Models.Items", "Item")
                        .WithMany("Copies")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("VirtualLibraryAPI.Domain.Models.Magazines", b =>
                {
                    b.HasOne("VirtualLibraryAPI.Domain.Models.Items", "Item")
                        .WithMany("Magazines")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("VirtualLibraryAPI.Domain.Models.Items", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Books");

                    b.Navigation("Copies");

                    b.Navigation("Magazines");
                });
#pragma warning restore 612, 618
        }
    }
}
